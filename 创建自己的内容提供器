应用中有一个使用Sqllite保存的数据库db。里面有一个表contacts用于保存联系人的基本信息，这些信息包括姓名，联系电话，性别。
要求你创建一个内容提供者，给其他app提供contacts中数据的查询。
其他app能够查询contacts表中的所有信息，也可以查询单条联系人的信息。

public class DatabaseProvider extends ContentProvider {

    public static final String AUTHORITY = "com.example.contentprovider.provider";
    private MyDatabaseHelper dbHelper;
    static final String URL="content://"+AUTHORITY +"/contacts";

    static final int CONTACTS = 0;
    static final int CONTACTS_ITEM = 1;

    private static UriMatcher uriMatcher;
    static {
        uriMatcher =  new UriMatcher(UriMatcher.NO_MATCH);
        uriMatcher.addURI(AUTHORITY,"contacts",CONTACTS);
        uriMatcher.addURI(AUTHORITY,"contacts/#",CONTACTS_ITEM);
    }

    private SQLiteDatabase db;
    static final String DATABASE_NAME="Phone";
    static final String TABLE_NAME="contacts";
    static final int DATABASE_VERSION=1;
    static final String CREATE_TABLE=
            "CREATE TABLE "+ TABLE_NAME +
            " (_id INTEGER PRIMARY KEY AUTOINCREMENT, " +
            " name TEXT NOT NULL, " +
            " sex TEXT NOT NULL, "+
            " tel TEXT NOT NULL);";
    private class MyDatabaseHelper extends SQLiteOpenHelper {
        public MyDatabaseHelper(Context context,String name,SQLiteDatabase.CursorFactory factory, int version) {
            super(context, DATABASE_NAME, null, DATABASE_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            db.execSQL(CREATE_TABLE);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            db.execSQL("DROP TABLE IF EXISTS " +  TABLE_NAME);
            onCreate(db);
        }
    }

    @Override
    public boolean onCreate() {
        dbHelper = new MyDatabaseHelper(getContext(),"Phone.db",null,1);
        db = dbHelper.getWritableDatabase();
        return (db == null)? false:true;
    }

    @Override
    public Cursor query(Uri uri, String[] projection, String selection,
                        String[] selectionArgs, String sortOrder) {
        SQLiteDatabase db = dbHelper.getWritableDatabase();
        Cursor cursor = null;
        switch (uriMatcher.match(uri)){
            case CONTACTS:
                cursor=db.query("contacts",projection,selection,selectionArgs,null,null,sortOrder);
                break;
            case CONTACTS_ITEM:
                String contactsId = uri.getPathSegments().get(1);
                cursor=db.query("contacts",projection,"id=?",new String[]{contactsId},null,null,sortOrder);
                break;
             default:
                 break;
        }
        return cursor;
    }

    @Override
    public Uri insert(Uri uri, ContentValues values) {
       SQLiteDatabase db = dbHelper.getWritableDatabase();
        Uri uriReturn = null;
        switch (uriMatcher.match(uri)){
            case CONTACTS:
            case CONTACTS_ITEM:
                long newContactsId = db.insert("contacts",null,values);
                uriReturn = uri.parse(URL+newContactsId);
                break;
             default:
                 break;
        }
        return uriReturn;
    }

    @Override
    public int update(Uri uri, ContentValues values, String selection,
                      String[] selectionArgs) {
        SQLiteDatabase db = dbHelper.getWritableDatabase();
        int updatedRow = 0;
        switch (uriMatcher.match(uri)){
            case CONTACTS:
                updatedRow = db.update("contacts",values,selection,selectionArgs);
                break;
            case CONTACTS_ITEM:
                String contactsId = uri.getPathSegments().get(1);
                updatedRow = db.update("contacts",values,"id=?",new String[]{contactsId});
                break;
            default:
                break;
        }
        return updatedRow;
    }

    @Override
    public int delete(Uri uri, String selection, String[] selectionArgs) {
        SQLiteDatabase db = dbHelper.getWritableDatabase();
        int deletedRow = 0;
        switch (uriMatcher.match(uri)){
            case CONTACTS:
                deletedRow = db.delete("contacts",selection,selectionArgs);
                break;
            case CONTACTS_ITEM:
                String contactsId = uri.getPathSegments().get(1);
                deletedRow = db.delete("contacts","id=?",new String[]{contactsId});
                break;
            default:
                break;
        }
        return deletedRow;
    }

    @Override
    public String getType(Uri uri) {
        switch (uriMatcher.match(uri)){
            case CONTACTS:
                return "vnd.android.cursor.dir/vnd.com.example.contentprovider.provider.contacts";
            case CONTACTS_ITEM:
                return "vnd.android.cursor.dir/vnd.com.example.contentprovider.provider.contacts";
        }
        return null;
    }
}

MainActivity代码
public class MainActivity extends AppCompatActivity {
    ArrayAdapter<String> adapter;
    List<String> contactsList = new ArrayList<>();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        ListView contactsView = (ListView)findViewById(R.id.contacts_view);
        adapter = new ArrayAdapter<String>(this,android.R.layout.simple_list_item_1,contactsList);
        contactsView.setAdapter(adapter);
        if(ContextCompat.checkSelfPermission(this, Manifest.permission.READ_CONTACTS)!= PackageManager.PERMISSION_GRANTED){
            ActivityCompat.requestPermissions(this,new String[]{Manifest.permission.READ_CONTACTS},1);
        }else{
            readContacts();
        }
    }

    private void readContacts() {
        Cursor cursor = null;
        try{
            cursor = getContentResolver().query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI,null,null,null,null);
            if(cursor != null){
                while (cursor.moveToNext()){
                    String displayName = cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME));
                    String number = cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));
                    contactsList.add(displayName+"\n"+number);
                }
                adapter.notifyDataSetChanged();
            }
        }catch (Exception e){
            e.printStackTrace();
        }finally {
            if(cursor != null){
                cursor.close();
            }
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode,String[] permissions,int[] grantResults) {
        switch (requestCode){
            case 1:
                if(grantResults.length>0 && grantResults[0]== PackageManager.PERMISSION_GRANTED){
                    readContacts();
                }else{
                    Toast.makeText(this,"you denied the permission", Toast.LENGTH_SHORT).show();
                }
                break;
             default:
        }
    }
}
